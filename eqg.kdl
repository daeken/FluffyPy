typedef :string :c-string

struct :StringRef<T> {
	T :index
	string :Value {
		cast<string> :stringTable[index...]
	}
}

match-extension "zon" :Zon
match-extension "ter" :Ter
match-extension "mod" :Mod
match-extension "ani" :Ani

typedef :Vector2 :float32[2]
typedef :Vector3 :float32[3]
typedef :Vector4 :float32[4]
typedef :Quaternion :float32[4]

struct :Mod {
	magic "EQGM"
	uint32 :Version :strlen :numMat :numVert :numTri :numBones
	uint8[strlen] :stringTable
	Material[numMat] :Materials
	if :"Version < 3" {
		then { Vertex[numVert] :Vertices; }
		else { Vertex3[numVert] :Vertices; }
	}
	Triangle[numTri] :Triangles
	Bone[numBones] :Bones
	if :"numBones > 0" {
		BoneAssignment[numVert] :BoneAssignments
	}
}

struct :Ter {
	magic "EQGT"
	uint32 :Version :strlen :numMat :numVert :numTri
	uint8[strlen] :stringTable
	Material[numMat] :Materials
	if :"Version < 3" {
		then { Vertex[numVert] :Vertices; }
		else { Vertex3[numVert] :Vertices; }
	}
	Triangle[numTri] :Triangles
}

struct :Material {
	uint32 :Index
	StringRef<uint32> :_name :_shader
	string :Name { return :_name.Value; }
	string :Shader { return :_shader.Value; }
	uint32 :numProp
	MatProperty[numProp] :Properties
}

struct :MatProperty {
	StringRef<uint32> :_name
	string :Name { return :_name.Value; }
	uint32 :Type
	match :Type {
		case 0 { float32 :FloatValue; }
		case 2 {
			StringRef<uint32> :_stringValue
			string :StringValue { return :_stringValue.Value; }
		}
		case 3 { uint32 :ARGBValue; }
		default { unsupported; }
	}
}

struct :Vertex {
	Vector3 :Position :Normal
	Vector2 :TexCoord
}

struct :Vertex3 {
	Vector3 :Position :Normal
	uint32 :unk1
	Vector2 :TexCoord :unk2
}

struct :Triangle {
	uint32[3] :Indices
	uint32 :MatIndex :Flag
}

struct :Bone {
	StringRef<uint32> :Name
	int32 :LinkBoneIndex
	uint32 :Flag
	int32 :ChildBoneIndex
	Vector3 :Position
	Quaternion :Rotation
	Vector3 :Scale
}

struct :BoneAssignment {
	uint32 :Count
	BoneWeight[4] :Weights
}

struct :BoneWeight {
	int32 :BoneIndex
	float32 :Value
}

struct :Ani {
	magic "EQGA"
	uint32 :Version :strlen :NumBones :numUnk2
	uint8[strlen] :stringTable
	FrameBone[NumBones] :FrameBones
}

struct :FrameBone {
	uint32 :numFrames
	StringRef<uint32> :Bone
	Frame[numFrames] :Frames
}

struct :Frame {
	uint32 :Time
	Vector3 :Translation
	Quaternion :Rotation
	Vector3 :Scaling
}

struct :Zon {
	magic "EQGZ"
	uint32 :Version :strlen :numFiles :numPlaceables :numUnk3 :numLights
	uint8[strlen] :stringTable
	StringRef<uint32>[numFiles] :files
	Placeable[numPlaceables] :Placeables
	// Incomplete
}

struct :Placeable {
	uint32 :index
	string :Filename { return :files[index].Value; }
	StringRef<uint32> :_name
	string :Name { return :_name.Value; }
	Vector3 :Position :Rotation
	float32 :Scale
}
